/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    // move tabix output to longphase subdirectory
    withName: '.*PHASING:TABIX_TABIX.*' {
        publishDir = [path: "${params.outdir}/longphase", mode: params.publish_dir_mode]
    }
    // move samtools index result to whatshap subdirectory
    withName: '.*PHASING:SAMTOOLS_INDEX.*' {
        publishDir = [path: "${params.outdir}/whatshap", mode: params.publish_dir_mode]
    }
    // distinguish germline and somatic calls
    withName: '.*SV_CALLING_GERMLINE.*' {
        ext.prefix = { meta.condition == "normal" ? "${meta.id}_germline" : "${meta.id}" }
    }

    withName: '.*ANNOTATE_SV.*' {
        ext.prefix = { "${meta.id}_${meta.condition}" }
    }

    withName: MULTIQC {
        container = 'quay.io/biocontainers/multiqc:1.27--pyhdfd78af_0'
    }

    withName: LONGCALLD {
        ext.args = params.longcalld_platform ? "${params.longcalld_platform}" : ''
    }

    withName: BIOMART {
        ext.args = params.genome_build ? "${params.genome_build}" : ''
    }

    withName: BCFTOOLS_QUERY {
        ext.args   = "-f '%CHROM\\t%POS\\t%ID\\t%INFO/SVTYPE\\t%INFO/STRANDS\\t%INFO/STRAND\\t%INFO/BP_NOTATION\\n' -u -H"
        publishDir = [path: "${params.outdir}/raw_calls", enabled: false]
    }

    withName: WGET {
        ext.suffix = "txt"
        publishDir = [path: "${params.outdir}/oncokb", mode: params.publish_dir_mode]
    }
    // max number of lines per chunked csv
    withName: CSVTK_CONCAT {
        publishDir = [path: "${params.outdir}/annotated_sv", enabled: false]
    }

    withName: MINDA {
        ext.args = params.filter_bed ? "--bed ${params.filter_bed}" : ''
    }

    withName: NANOMONSV_PARSE {
        ext.prefix = { "${meta.id}.${meta.condition}" }
    }

    withName: '.*SAVANA.*' {
        ext.args       = params.contigs_list ? "--contigs ${params.contigs_list}" : ''
        ext.model_args = params.savana_model ?: ''
    }

    withName: LONGPHASE_PHASE {
        ext.args = params.longphase_platform
    }

    withName: '.*WAKHAN.*' {
        ext.args  = "--bin-size ${params.binsize} --contigs ${params.contigs} --phaseblocks-enable --loh-enable --copynumbers-subclonal-enable"
        ext.args2 = params.input_genes ? "--user-input-genes ${params.input_genes}" : ''
    }

    withName: '.*WAKHAN_REPHASE_CNA' {
        ext.args  = "--bin-size ${params.binsize} --contigs ${params.contigs} --phaseblocks-enable --loh-enable --copynumbers-subclonal-enable"
        ext.args1 = params.use_sv_haplotypes ? "--use-sv-haplotypes": ''
        ext.args2 = params.input_genes ? "--user-input-genes ${params.input_genes}" : ''
        cpus = 8
        memory = { 64.GB * task.attempt }
        time   = { 16.h  * task.attempt }
    }

    withName: SEVERUS {
        ext.args = "--output-read-ids"
    }

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
    ]

    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
